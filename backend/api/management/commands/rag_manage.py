"""
Comando Django para gestionar el sistema RAG
==========================================

Permite sincronizar documentos, procesar archivos y realizar consultas
desde la l√≠nea de comandos.
"""

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
import json
import os
import sys

# Agregar el path del rag_system al Python path
sys.path.append(os.path.join(settings.BASE_DIR, 'rag_system'))

try:
    from rag_system import (
        initialize_rag_system, 
        get_rag_status,
        sync_drive_documents,
        query_rag,
        RAG_MODULES_AVAILABLE
    )
    from rag_system.rag_engine.pipeline import RAGPipeline
except ImportError as e:
    RAG_MODULES_AVAILABLE = False
    RAGPipeline = None

class Command(BaseCommand):
    help = 'Gestionar el sistema RAG (Retrieval-Augmented Generation)'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['status', 'init', 'sync', 'query', 'reset', 'process'],
            help='Acci√≥n a realizar'
        )
        
        parser.add_argument(
            '--question', '-q',
            type=str,
            help='Pregunta para consulta RAG'
        )
        
        parser.add_argument(
            '--file', '-f',
            type=str,
            help='Archivo espec√≠fico a procesar'
        )
        
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forzar reprocesamiento de documentos'
        )
        
        parser.add_argument(
            '--top-k', '-k',
            type=int,
            default=5,
            help='N√∫mero de documentos relevantes a recuperar (default: 5)'
        )
        
        parser.add_argument(
            '--no-generation',
            action='store_true',
            help='Solo b√∫squeda, sin generaci√≥n de respuesta'
        )
        
        parser.add_argument(
            '--format',
            choices=['json', 'text'],
            default='text',
            help='Formato de salida (default: text)'
        )
    
    def handle(self, *args, **options):
        if not RAG_MODULES_AVAILABLE:
            raise CommandError(
                "‚ùå Sistema RAG no disponible. "
                "Instala las dependencias: pip install -r requirements.txt"
            )
        
        action = options['action']
        
        try:
            if action == 'status':
                self._handle_status(options)
            elif action == 'init':
                self._handle_init(options)
            elif action == 'sync':
                self._handle_sync(options)
            elif action == 'query':
                self._handle_query(options)
            elif action == 'reset':
                self._handle_reset(options)
            elif action == 'process':
                self._handle_process(options)
            else:
                raise CommandError(f"Acci√≥n no reconocida: {action}")
                
        except Exception as e:
            raise CommandError(f"‚ùå Error ejecutando {action}: {e}")
    
    def _handle_status(self, options):
        """Mostrar estado del sistema RAG"""
        self.stdout.write("üîç Verificando estado del sistema RAG...")
        
        try:
            status = get_rag_status()
            
            if options['format'] == 'json':
                self.stdout.write(json.dumps(status, indent=2, ensure_ascii=False))
                return
            
            # Formato texto
            self.stdout.write(f"\\nüìä Estado del Sistema RAG")
            self.stdout.write(f"========================")
            self.stdout.write(f"Versi√≥n: {status.get('version', 'Unknown')}")
            self.stdout.write(f"M√≥dulos disponibles: {'‚úÖ' if status['modules_available'] else '‚ùå'}")
            
            # Configuraci√≥n
            config = status.get('configuration', {})
            self.stdout.write(f"\\nüîß Configuraci√≥n:")
            for key, value in config.items():
                icon = '‚úÖ' if value else '‚ùå'
                self.stdout.write(f"  {icon} {key}")
            
            # Componentes
            if 'components' in status:
                self.stdout.write(f"\\nüß© Componentes:")
                for component, ready in status['components'].items():
                    icon = '‚úÖ' if ready else '‚ùå'
                    self.stdout.write(f"  {icon} {component}")
            
            if 'components_error' in status:
                self.stdout.write(f"\\n‚ö†Ô∏è  Error en componentes: {status['components_error']}")
            
        except Exception as e:
            raise CommandError(f"Error obteniendo estado: {e}")
    
    def _handle_init(self, options):
        """Inicializar sistema RAG"""
        self.stdout.write("üöÄ Inicializando sistema RAG...")
        
        try:
            result = initialize_rag_system()
            
            if options['format'] == 'json':
                self.stdout.write(json.dumps(result, indent=2, ensure_ascii=False))
                return
            
            if result['success']:
                self.stdout.write("‚úÖ Sistema RAG inicializado correctamente")
                
                components = result.get('components', {})
                for component, status in components.items():
                    icon = '‚úÖ' if status else '‚ùå'
                    self.stdout.write(f"  {icon} {component}")
            else:
                self.stdout.write(f"‚ùå Error inicializando: {result.get('error', 'Unknown')}")
                
                if 'config_status' in result:
                    self.stdout.write("\\nüîß Estado de configuraci√≥n:")
                    for key, value in result['config_status'].items():
                        icon = '‚úÖ' if value else '‚ùå'
                        self.stdout.write(f"  {icon} {key}")
            
        except Exception as e:
            raise CommandError(f"Error inicializando: {e}")
    
    def _handle_sync(self, options):
        """Sincronizar documentos desde Google Drive"""
        self.stdout.write("üì• Sincronizando documentos desde Google Drive...")
        
        try:
            pipeline = RAGPipeline()
            result = pipeline.sync_and_process_documents(
                force_reprocess=options.get('force', False)
            )
            
            if options['format'] == 'json':
                self.stdout.write(json.dumps(result, indent=2, ensure_ascii=False))
                return
            
            if result['success']:
                sync_result = result.get('sync_result', {})
                processing = result.get('processing_summary', {})
                
                self.stdout.write("‚úÖ Sincronizaci√≥n completada")
                self.stdout.write(f"\\nüìÅ Archivos Drive:")
                self.stdout.write(f"  üì• Descargados: {sync_result.get('downloaded', 0)}")
                self.stdout.write(f"  ‚è≠Ô∏è  Omitidos: {sync_result.get('skipped', 0)}")
                self.stdout.write(f"  ‚ùå Errores: {sync_result.get('errors', 0)}")
                
                self.stdout.write(f"\\nüìÑ Procesamiento:")
                self.stdout.write(f"  ‚úÖ Exitosos: {processing.get('successful', 0)}")
                self.stdout.write(f"  ‚ùå Fallidos: {processing.get('failed', 0)}")
                self.stdout.write(f"  üìù Chunks: {processing.get('valid_chunks', 0)}")
                
            else:
                self.stdout.write(f"‚ùå Error en sincronizaci√≥n: {result.get('error', 'Unknown')}")
            
        except Exception as e:
            raise CommandError(f"Error sincronizando: {e}")
    
    def _handle_query(self, options):
        """Realizar consulta RAG"""
        question = options.get('question')
        
        if not question:
            raise CommandError("‚ùå Pregunta requerida. Usa --question 'tu pregunta'")
        
        self.stdout.write(f"‚ùì Procesando consulta: {question}")
        
        try:
            pipeline = RAGPipeline()
            result = pipeline.query(
                question=question,
                top_k=options.get('top_k', 5),
                include_generation=not options.get('no_generation', False)
            )
            
            if options['format'] == 'json':
                self.stdout.write(json.dumps(result, indent=2, ensure_ascii=False))
                return
            
            if result['success']:
                self.stdout.write(f"\\nüîç Documentos encontrados: {len(result.get('relevant_documents', []))}")
                
                # Mostrar fuentes
                sources = result.get('sources', [])
                if sources:
                    self.stdout.write(f"\\nüìö Fuentes:")
                    for source in sources[:3]:  # Solo las 3 m√°s relevantes
                        score = source.get('similarity_score', 0)
                        self.stdout.write(f"  üìÑ {source.get('file_name', 'unknown')} (similitud: {score:.3f})")
                
                # Mostrar respuesta
                answer = result.get('answer')
                if answer:
                    self.stdout.write(f"\\nüí¨ Respuesta:")
                    self.stdout.write(f"{answer}")
                else:
                    self.stdout.write(f"\\n‚ö†Ô∏è  No se gener√≥ respuesta autom√°tica")
                    
                    # Mostrar contexto si no hay respuesta
                    context = result.get('context', '')
                    if context:
                        self.stdout.write(f"\\nüìã Contexto encontrado:")
                        self.stdout.write(f"{context[:500]}...")
            else:
                self.stdout.write(f"‚ùå Error en consulta: {result.get('error', 'Unknown')}")
            
        except Exception as e:
            raise CommandError(f"Error en consulta: {e}")
    
    def _handle_process(self, options):
        """Procesar archivo espec√≠fico"""
        file_path = options.get('file')
        
        if not file_path:
            raise CommandError("‚ùå Archivo requerido. Usa --file 'ruta/al/archivo'")
        
        if not os.path.exists(file_path):
            raise CommandError(f"‚ùå Archivo no encontrado: {file_path}")
        
        self.stdout.write(f"üìÑ Procesando archivo: {os.path.basename(file_path)}")
        
        try:
            pipeline = RAGPipeline()
            result = pipeline.process_document(file_path)
            
            if options['format'] == 'json':
                self.stdout.write(json.dumps(result, indent=2, ensure_ascii=False))
                return
            
            if result['success']:
                stats = result.get('stats', {})
                
                self.stdout.write("‚úÖ Archivo procesado correctamente")
                self.stdout.write(f"\\nüìä Estad√≠sticas:")
                self.stdout.write(f"  üìù Caracteres: {stats.get('total_chars', 0):,}")
                self.stdout.write(f"  üî§ Palabras: {stats.get('total_words', 0):,}")
                self.stdout.write(f"  üìÑ Chunks: {stats.get('total_chunks', 0)}")
                self.stdout.write(f"  üîß M√©todo: {stats.get('processing_method', 'unknown')}")
                
            else:
                self.stdout.write(f"‚ùå Error procesando archivo: {result.get('error', 'Unknown')}")
            
        except Exception as e:
            raise CommandError(f"Error procesando archivo: {e}")
    
    def _handle_reset(self, options):
        """Resetear sistema RAG"""
        self.stdout.write("‚ö†Ô∏è  Reseteando sistema RAG...")
        
        # Confirmaci√≥n de seguridad
        confirm = input("\\n¬øEst√°s seguro de que quieres eliminar todos los documentos? (s√≠/no): ")
        
        if confirm.lower() not in ['s√≠', 'si', 'yes', 'y']:
            self.stdout.write("‚ùå Operaci√≥n cancelada")
            return
        
        try:
            pipeline = RAGPipeline()
            result = pipeline.reset_system()
            
            if options['format'] == 'json':
                self.stdout.write(json.dumps(result, indent=2, ensure_ascii=False))
                return
            
            if result['success']:
                self.stdout.write("‚úÖ Sistema RAG reseteado completamente")
                self.stdout.write("  üóëÔ∏è  Base de datos vectorial limpiada")
                self.stdout.write("  üßπ Cache de embeddings limpiado")
                self.stdout.write("  üìä Estad√≠sticas reiniciadas")
            else:
                self.stdout.write(f"‚ùå Error reseteando: {result.get('error', 'Unknown')}")
            
        except Exception as e:
            raise CommandError(f"Error reseteando: {e}")